describe('Markdown plugin', function() {
    const Vue = require('vue');

    Vue.use(require('plugins/markdown'));
    Vue.config.async = false;

    afterEach(function() {
        fixture.cleanup();
    });

    /**
     * Remove invisible nodes generated by Vue.js
     */
    function strip(el) {
        [...el.childNodes].forEach(function(node) {
            const is_comment = node.nodeType === Node.COMMENT_NODE;
            const is_empty_text = node.nodeType === Node.TEXT_NODE && !/\S/.test(node.nodeValue);
            if (is_comment || is_empty_text) {
                node.parentNode.removeChild(node);
            }
        });
        return el;
    }

    describe('markdown filter', function() {
        function el(text) {
            const vm = new Vue({
                el: fixture.set('<div>{{{text | markdown}}}</div>')[0],
                replace: false,
                data: {
                    text: text
                }
            });
            return strip(vm.$el);
        }

        it('should render empty string as ""', function() {
            expect(el('').childNodes).to.be.emtpy;
        });

        it('should render null value as ""', function() {
            expect(el(null).childNodes).to.be.empty;
        });
        it('should render undefined value as ""', function() {
            expect(el(undefined).childNodes).to.be.empty;
        });

        it('should markdown content', function() {
            expect(el('**aaa**')).to.have.html('<p><strong>aaa</strong></p>');
        });
    });

    describe('markdown directive', function() {
        function el(text) {
            const vm = new Vue({
                el: fixture.set('<div v-markdown="text"></div>')[0],
                data: {
                    'text': text
                }
            });
            return strip(vm.$el);
        }

        it('should render empty string as ""', function() {
            expect(el('').childNodes).to.be.emtpy;
        });

        it('should render null value as ""', function() {
            expect(el(null).childNodes).to.be.empty;
        });
        it('should render undefined value as ""', function() {
            expect(el(undefined).childNodes).to.be.empty;
        });

        it('should markdown content', function() {
            expect(el('**aaa**')).to.have.html('<p><strong>aaa</strong></p>');
        });
    });
});

describe('Markdown backend compliance', function() {
    const commonmark = require('helpers/commonmark').default;

    /**
    * An expect wrapper rendering the markdown
    * and then allowing to perform chai-dom expectation on it
    */
    function markdown(source) {
        const div = document.createElement('div');
        div.innerHTML = commonmark(source);
        return div;
    }

    it('should transform urls to anchors', function() {
        const source = 'http://example.net/';
        expect(markdown(source)).to.have.html('<p><a href="http://example.net/">http://example.net/</a></p>');
    });

    it('should not transform emails to anchors', function() {
        const source = 'coucou@cmoi.fr';
        expect(markdown(source)).to.have.html('<p>coucou@cmoi.fr</p>');
    });

    it('should not transform links within pre', function() {
        const source = '<pre>http://example.net/</pre>';
        expect(markdown(source)).to.have.html('<pre>http://example.net/</pre>');
    });

    it('should sanitize evil code', function() {
        const source = 'an <script>evil()</script>';
        expect(markdown(source)).to.have.text('an &lt;script&gt;evil()&lt;/script&gt;');
    });

    it('should handle soft breaks as <br/>', function() {
        const source = 'line 1\nline 2';
        expect(markdown(source)).to.have.html('<p>line 1<br>line 2</p>');
    });

    it('should not render github tables', function() {
        const source = [
            '| first | second |',
            '|-------|--------|',
            '| value | value  |',
        ].join('\n');
        expect(markdown(source)).to.have.html(`<p>${source.replace(/\n/g, '<br>')}</p>`);
    });
});
