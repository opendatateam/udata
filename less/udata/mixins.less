@import "~bootstrap/less/mixins/vendor-prefixes";

.activate-gpu() {
    -webkit-transform: translateZ(0);
       -moz-transform: translateZ(0);
        -ms-transform: translateZ(0);
         -o-transform: translateZ(0);
            transform: translateZ(0);
}


.section-defaults() {
    padding: 10px 0 20px 0;
    // padding-top: 20px;
}


.ellipsis {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

/**
 * CSS line clamping with improved dedicated support for Webkit and Opera
 * Other browsers fallback on gradient and needs predefined height.
 *
 * As lessc can't process @supports directive, the mixin is splitted
 * in two parts and the caller should declare the proper @supports directive
 * and call .clamp-fallback in it
 *
 * See .clamp-line-size() for local fix
 */
.clamp(@lines, @line-height: @line-height-computed) {
    position: relative;
    height: @lines * @line-height;  // Override this locally to have the right size
    overflow: hidden;
    text-overflow: ellipsis;
    text-overflow: -o-ellipsis-lastline;  // Only Opera
    display: -webkit-box;
    -webkit-line-clamp: @lines;
    -webkit-box-orient: vertical;
}

/**
 * CSS line clamping with improved dedicated support for Webkit and Opera
 * Other browsers fallback on gradient and needs predefined height.
 * See .clamp-line-size() for local fix
 */
 .clamp-fallback(@line-height: @line-height-computed, @color: white) {
    &:after {
        content: "";
        text-align: right;
        position: absolute;
        bottom: 0;
        right: 0;
        width: 10%; // Override this to change size
        height: @line-height;  // Override this locally to have the right size
        background: linear-gradient(to right, fade(@color, 0), @color 80%);
    }
}

/**
 * Local clamp height fix
 */
.clamp-sizing(@lines, @line-height) {
    line-height: @line-height;
    height: @lines * @line-height;

    &:after {
        height: @line-height;
    }
}

/**
 * Local clamp width fix
 */
 .clamp-width(@width) {
    &:after {
        width: @width;
    }
}

/**
 * Local clamp color fix
 */
 .clamp-color(@color) {
    &:after {
        background: linear-gradient(to right, fade(@color, 0), @color 80%);
    }
}

.clamp-uniline {
    display: inline-block;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.clamp-2 {
    .clamp(2);
    @supports not ((-webkit-line-clamp: 2) or (text-overflow: -o-ellipsis-lastline)) {
        .clamp-fallback();
    }
}

.clamp-3 {
    .clamp(3);
    @supports not ((-webkit-line-clamp: 3) or (text-overflow: -o-ellipsis-lastline)) {
        .clamp-fallback();
    }
}
// .clamp-3 { .clamp(3) }

.square-stamp(@color) {
    padding: 2px 4px;
    color: @color !important;
    text-transform: uppercase;
    border: 2px solid @color;
    font-size: 9px;
    margin-left: 3px;
    font-weight: bold;
    top: -1px;
    position: relative;
    white-space: nowrap;
}


.transform(@value) {
  -webkit-transform: @value;
      -ms-transform: @value; // IE9 only
       -o-transform: @value;
          transform: @value;
}


.animated {
    .animation-duration(1s);
    .animation-fill-mode(both);
}

@-webkit-keyframes fadeInDown {
  0% {
    opacity: 0;
    .translate3d(0, -100%, 0);
  }

  100% {
    opacity: 1;
    .transform(none);
  }
}

@keyframes fadeInDown {
  0% {
    opacity: 0;
    .translate3d(0, -100%, 0);
  }

  100% {
    opacity: 1;
    .transform(none);
  }
}

.fadeInDown {
  .animation-name(fadeInDown);
}

@-webkit-keyframes fadeOutDown {
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
    .translate3d(0, 100%, 0);
  }
}

@keyframes fadeOutDown {
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
    .translate3d(0, 100%, 0);
  }
}

.fadeOutDown {
  .animation-name(fadeOutDown);
}
