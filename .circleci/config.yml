---
version: 2.1

parameters:
  python-version:
    type: string
    default: "3.11"
  publish-branch:
    type: string
    default: "master"
    description: "Branch to publish to PyPi and trigger the Gitlab CI/CD pipeline when pushed to"
  deploy-env:
    type: string
    default: "dev"
    description: "Environment to deploy to"

jobs:
  python:
    docker:
      - image: udata/circleci:py<< pipeline.parameters.python-version >>
      - image: mongo:6.0.4
      - image: redis:alpine
    environment:
      BASH_ENV: /root/.bashrc
    steps:
      - checkout
      - run:
          name: Get the base reference branch
          command: export BASE_BRANCH=$(base_branch)
      - restore_cache:
          keys:
            # 1. Exact match of dependencies
            - py3-cache-v13-{{ arch }}-{{ checksum "pyproject.toml" }}-{{ checksum "uv.lock" }}
            # 2. Latest cache from this branch
            - py3-cache-v13-{{ arch }}-{{ .Branch }}
            # 3. Latest cache from base branch (e.g., master)
            - py3-cache-v13-{{ arch }}-{{ .Environment.BASE_BRANCH }}
            # 4. Any latest cache for this architecture (fallback)
            - py3-cache-v13-{{ arch }}-
      - run:
          name: Install Python dependencies
          command: |
            pip install uv
            uv sync --extra dev --extra test
      - save_cache:
          key: py3-cache-v13-{{ arch }}-{{ checksum "pyproject.toml" }}-{{ checksum "uv.lock" }}
          paths:
            - .venv
      - save_cache:
          key: py3-cache-v13-{{ arch }}-{{ .Branch }}
          paths:
            - .venv
      - run:
          name: Lint and format code and sort imports
          # ruff check --extend-select I . : check linting and imports sorting without fixing (to fix, use --fix)
          # ruff format --check . : check code formatting without fixing (to fix, remove --check)
          command: |
            uv run ruff check --extend-select I .
            uv run ruff format --check .
      - run:
          name: Run tests
          command: |
            mkdir -p reports/python
            uv run inv test --report --ci
      - store_test_results:
          path: reports/python
      - store_artifacts:
          path: reports/
          destination: reports

      - persist_to_workspace:
          root: .
          paths:
            - venv

  assets:
    docker:
      # TODO make an image based on 2-alpine w/ nvm and phantom deps
      - image: udata/circleci:py<< pipeline.parameters.python-version >>
    environment:
      BASH_ENV: /root/.bashrc
    steps:
      - checkout
      - run:
          name: Compute JS dependencies key
          command: cat .nvmrc package.json > js.deps
      - run:
          name: Get the base reference branch
          command: export BASE_BRANCH=$(base_branch)
      - restore_cache:
          keys:
            # 1. Exact match of dependencies
            - js-cache-{{ arch }}-{{ checksum "js.deps" }}
            # 2. Latest cache from this branch
            - js-cache-{{ arch }}-{{ .Branch }}
            # 3. Latest cache from base branch (e.g., master)
            - js-cache-{{ arch }}-{{ .Environment.BASE_BRANCH }}
            # 4. Any latest cache for this architecture (fallback)
            - js-cache-{{ arch }}-
      - run:
          name: Install NodeJS and dependencies
          command: |
            nvm install
            npm install
            npm list || true
      - save_cache:
          key: js-cache-{{ arch }}-{{ checksum "js.deps" }}
          paths:
            - node_modules
      - save_cache:
          key: js-cache-{{ arch }}-{{ .Branch }}
          paths:
            - node_modules
      - run:
          name: Compile assets
          command: |
            npm run assets:build
            npm run widgets:build
            npm run oembed:build
      - persist_to_workspace:
          root: .
          paths:
            - udata/static

  dist:
    docker:
      - image: udata/circleci:py<< pipeline.parameters.python-version >>
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install build tools
          command: |
            pip install uv
            uv pip install build setuptools-scm
      - run:
          name: Save and show RELEASE_VERSION
          command: |
            # derive from setuptools_scm or base version + build number
            RELEASE_VERSION=$(python -m setuptools_scm)

            echo "export RELEASE_VERSION=$RELEASE_VERSION" > release.env
            echo "RELEASE_VERSION is $RELEASE_VERSION"
      - run:
          name: Build a distributable package as a wheel release
          command: |
            uv run inv pydist
      - store_artifacts:
          path: dist
      - persist_to_workspace:
          root: .
          paths:
            - dist
            - release.env

  publish:
    docker:
      - image: udata/circleci:py<< pipeline.parameters.python-version >>
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Publish on PyPI
          command: |
            uv publish --username "${PYPI_USERNAME}" --password "${PYPI_PASSWORD}" dist/*.whl

  trigger-gitlab-pipeline:
    docker:
      - image: cimg/base:stable
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Configure the SSH simple-scaffold repository private key
          command: |
            mkdir -p ~/.ssh
            # SCAFFOLD_PRIVATE_KEY is the private key related to the "simple-scaffold" GitLab repository, so that it can be cloned
            # CircleCI doesn't accept multiple lines in a single environment variable, so the multiline private key must be base64 encoded, and then decoded here
            echo "$SCAFFOLD_PRIVATE_KEY" | base64 -d > ~/.ssh/id_ed25519
            chmod 600 ~/.ssh/id_ed25519
            ssh-keyscan -t rsa gitlab.com >> ~/.ssh/known_hosts
      - run:
          name: Configure Git
          command: |
            git config --global user.email "root@data.gouv.fr"
            git config --global user.name "datagouv"
      - run:
          name: Clone simple-scaffold repository
          command: |
            git clone --quiet --depth 1 $SCAFFOLD_REPO_SSH_URL scaffold
      - run:
          name: Trigger GitLab CI/CD pipeline for udata to deploy to << pipeline.parameters.deploy-env >> environment
          command: |
            source release.env
            cd scaffold
            # Run the script that triggers the Gitlab CI/CD pipeline.
            # Must have GITLAB_API_TOKEN set in the environment
            # GITLAB_API_TOKEN is the token related to the "infra" GitLab repository, so that the Gitlab CI/CD pipeline can be triggered
            # The script args are, in order:
            # - udata: the name of the project to deploy (APP_NAME)
            # - $RELEASE_VERSION: the version to deploy (RELEASE_VERSION)
            # - << pipeline.parameters.deploy-env >>: the environment to deploy to (ENV)
            # - "": the deploy variables (VARS)
            ./scripts/gitlab-ci-pipeline.sh udata $RELEASE_VERSION << pipeline.parameters.deploy-env >> ""

  create-sentry-release:
    docker:
      - image: cimg/base:stable
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Create Sentry release
          command: |
            source release.env

            # Create release
            curl https://errors.data.gouv.fr/api/0/organizations/sentry/releases/ \
              -H "Authorization: Bearer ${SENTRY_AUTH_TOKEN}" \
              -H 'Content-Type: application/json' \
              -d "{\"version\":\"${RELEASE_VERSION}\",\"ref\":\"${CIRCLE_SHA1}\",\"projects\":[\"datagouv\"]}"

            # Create deployment
            curl https://errors.data.gouv.fr/api/0/organizations/sentry/releases/${RELEASE_VERSION}/deploys/ \
              -H "Authorization: Bearer ${SENTRY_AUTH_TOKEN}" \
              -H 'Content-Type: application/json' \
              -d "{\"environment\":\"<< pipeline.parameters.deploy-env >>\"}"

workflows:
  build-publish-deploy:
    jobs:
      - python
      - assets
      - dist:
          requires:
            - python
            - assets
      - publish:
          requires:
            - dist
          filters:
            branches:
              only:
                - << pipeline.parameters.publish-branch >>
          context: org-global
      - trigger-gitlab-pipeline:
          requires:
            - publish
          filters:
            branches:
              only:
                - << pipeline.parameters.publish-branch >>
          context:
            - org-global
            - gitlab-trigger
      - create-sentry-release:
          requires:
            - trigger-gitlab-pipeline
          filters:
            branches:
              only:
                - << pipeline.parameters.publish-branch >>
          context:
            - org-global
