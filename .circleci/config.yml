---
version: 2

jobs:
  python:
    docker:
      - image: udata/circleci:py3.11
      - image: mongo:6.0.4
      - image: redis:alpine
    environment:
      BASH_ENV: /root/.bashrc
    parallelism: 4
    steps:
      - checkout
      - run:
          name: Compute Python dependencies key
          command: cat requirements/*.pip > python.deps
      - run:
          name: Get the base reference branch
          command: export BASE_BRANCH=$(base_branch)
      - restore_cache:
          keys:
            # 1. Exact match of dependencies
            - py3-cache-v12-{{ arch }}-{{ checksum "python.deps" }}
            # 2. Latest cache from this branch
            - py3-cache-v12-{{ arch }}-{{ .Branch }}
            # 3. Latest cache from base branch (e.g., master)
            - py3-cache-v12-{{ arch }}-{{ .Environment.BASE_BRANCH }}
            # 4. Any latest cache for this architecture (fallback)
            - py3-cache-v12-{{ arch }}-
      - run:
          name: Install Python dependencies
          command: |
            python -m venv venv
            source venv/bin/activate
            pip install --upgrade wheel pip
            pip install -r requirements/develop.pip
            pip install -e .
      - save_cache:
          key: py3-cache-v12-{{ arch }}-{{ checksum "python.deps" }}
          paths:
          - venv
      - save_cache:
          key: py3-cache-v12-{{ arch }}-{{ .Branch }}
          paths:
          - venv
      - run:
          name: Lint and format code and sort imports
          # ruff check --select I . : check linting and imports sorting without fixing (to fix, use --fix)
          # ruff format --check . : check code formatting without fixing (to fix, remove --check)
          command: |
            source venv/bin/activate
            ruff check .
            ruff format --check .
      - run:
          name: Run tests
          command: |
            mkdir -p reports/python
            source venv/bin/activate

            echo "Debug: Current working directory"
            pwd

            echo "Debug: Listing project root contents"
            ls -la

            echo "Debug: Looking for all test files"
            find . -name "test_*.py"

            echo "Debug: Attempting to find and split tests"
            TESTFILES=$(find udata/tests -name "test_*.py" | circleci tests split --split-by=timings)
            echo "Debug: TESTFILES=$TESTFILES"

            echo "Debug: Current node index: $CIRCLE_NODE_INDEX"
            echo "Debug: Total nodes: $CIRCLE_NODE_TOTAL"

            if [ -n "$TESTFILES" ]; then
              echo "Running tests: $TESTFILES"
              inv test --report --ci --paths "$TESTFILES"
            else
              echo "Error: No tests found to run in this split"
              echo "Debug: Listing all Python files"
              find . -name "*.py" | grep -i test
              exit 1
            fi
      - store_test_results:
          path: reports/python
      - store_artifacts:
          path: reports/
          destination: reports

      - persist_to_workspace:
          root: .
          paths:
          - venv

  assets:
    docker:
      # TODO make an image based on 2-alpine w/ nvm and phantom deps
      - image: udata/circleci:py3.11
    environment:
      BASH_ENV: /root/.bashrc
    parallelism: 3
    steps:
      - checkout
      - run:
          name: Compute JS dependencies key
          command: cat .nvmrc package.json > js.deps
      - run:
          name: Get the base reference branch
          command: export BASE_BRANCH=$(base_branch)
      - restore_cache:
          keys:
            # 1. Exact match of dependencies
            - js-cache-{{ arch }}-{{ checksum "js.deps" }}
            # 2. Latest cache from this branch
            - js-cache-{{ arch }}-{{ .Branch }}
            # 3. Latest cache from base branch (e.g., master)
            - js-cache-{{ arch }}-{{ .Environment.BASE_BRANCH }}
            # 4. Any latest cache for this architecture (fallback)
            - js-cache-{{ arch }}-
      - run:
          name: Install NodeJS and dependencies
          command: |
            nvm install
            npm install
            npm list || true
      - save_cache:
          key: js-cache-{{ arch }}-{{ checksum "js.deps" }}
          paths:
          - node_modules
      - save_cache:
          key: js-cache-{{ arch }}-{{ .Branch }}
          paths:
          - node_modules
      - run:
          name: Compile assets
          command: |
            COMMANDS=("npm run assets:build" "npm run widgets:build" "npm run oembed:build")
            INDEX=$((CIRCLE_NODE_INDEX))
            if [ $INDEX -lt ${#COMMANDS[@]} ]; then
              echo "Running: ${COMMANDS[$INDEX]}"
              eval "${COMMANDS[$INDEX]}"
            fi
      - persist_to_workspace:
          root: .
          paths:
            - udata/static

  dist:
    docker:
      - image: udata/circleci:py3.11
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Build a distributable package
          command: |
            source venv/bin/activate
            # Build a wheel release
            if [[ $CIRCLE_TAG ]]; then
                # This is a tagged release
                inv pydist
            elif [[ "$CIRCLE_BRANCH" == feature/* ]]; then
                # This is a feature branch
                inv pydist -b $CIRCLE_BUILD_NUM+${CIRCLE_BRANCH#*/}
            else
                # This is a simple development build
                inv pydist -b $CIRCLE_BUILD_NUM
            fi
      - store_artifacts:
          path: dist
      - persist_to_workspace:
          root: .
          paths:
            - dist

  publish:
    docker:
      - image: udata/circleci:py3.11
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Publish on PyPI
          command: |
            source venv/bin/activate
            pip install twine
            twine upload --username "${PYPI_USERNAME}" --password "${PYPI_PASSWORD}" dist/*.whl

workflows:
  version: 2
  build:
    jobs:
      - python:
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - assets:
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - dist:
          requires:
            - python
            - assets
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - publish:
          requires:
            - dist
          filters:
            branches:
              only:
                - master
                - /[0-9]+(\.[0-9]+)+/
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
          context: org-global
