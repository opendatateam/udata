---
version: 2.1

parameters:
  python-version:
    type: string
    default: "3.11"
  publish-branch:
    type: string
    default: "master"

jobs:
  python:
    docker:
      - image: udata/circleci:py<< pipeline.parameters.python-version >>
      - image: mongo:6.0.4
      - image: redis:alpine
    environment:
      BASH_ENV: /root/.bashrc
    steps:
      - checkout
      - run:
          name: Compute Python dependencies key
          command: cat requirements/*.pip > python.deps
      - run:
          name: Get the base reference branch
          command: export BASE_BRANCH=$(base_branch)
      - restore_cache:
          keys:
          - py3-cache-v12-{{ arch }}-{{ checksum "python.deps" }}
          - py3-cache-v12-{{ arch }}-{{ .Branch }}
          - py3-cache-v12-{{ arch }}-{{ .Environment.BASE_BRANCH }}
      - run:
          name: Install Python dependencies
          command: |
            python -m venv venv
            source venv/bin/activate
            pip install --upgrade wheel pip
            pip install -r requirements/develop.pip
            pip install -e .
      - save_cache:
          key: py3-cache-v12-{{ arch }}-{{ checksum "python.deps" }}
          paths:
          - venv
      - save_cache:
          key: py3-cache-v12-{{ arch }}-{{ .Branch }}
          paths:
          - venv
      - run:
          name: Lint and format code and sort imports
          # ruff check --select I . : check linting and imports sorting without fixing (to fix, use --fix)
          # ruff format --check . : check code formatting without fixing (to fix, remove --check)
          command: |
            source venv/bin/activate
            ruff check .
            ruff format --check .
      - run:
          name: Run tests
          command: |
            mkdir -p reports/python
            source venv/bin/activate
            inv test --report --ci
      - store_test_results:
          path: reports/python
      - store_artifacts:
          path: reports/
          destination: reports

      - persist_to_workspace:
          root: .
          paths:
          - venv

  assets:
    docker:
      # TODO make an image based on 2-alpine w/ nvm and phantom deps
      - image: udata/circleci:py<< pipeline.parameters.python-version >>
    environment:
      BASH_ENV: /root/.bashrc
    steps:
      - checkout
      - run:
          name: Compute JS dependencies key
          command: cat .nvmrc package.json > js.deps
      - run:
          name: Get the base reference branch
          command: export BASE_BRANCH=$(base_branch)
      - restore_cache:
          keys:
            - js-cache-{{ arch }}-{{ checksum "js.deps" }}
            - js-cache-{{ arch }}-{{ .Branch }}
            - js-cache-{{ arch }}-{{ .Environment.BASE_BRANCH }}
      - run:
          name: Install NodeJS and dependencies
          command: |
            nvm install
            npm install
            npm list || true
      - save_cache:
          key: js-cache-{{ arch }}-{{ checksum "js.deps" }}
          paths:
          - node_modules
      - save_cache:
          key: js-cache-{{ arch }}-{{ .Branch }}
          paths:
          - node_modules
      - run:
          name: Compile assets
          command: |
            npm run assets:build
            npm run widgets:build
            npm run oembed:build

      - persist_to_workspace:
          root: .
          paths:
            - udata/static

  build:
    docker:
      - image: udata/circleci:py<< pipeline.parameters.python-version >>
    environment:
      BASH_ENV: /root/.bashrc
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Build a distributable package
          command: |
            source venv/bin/activate
            # Build a wheel release
            if [[ $CIRCLE_TAG ]]; then
                # This is a tagged release
                inv pydist
            elif [[ "$CIRCLE_BRANCH" == feature/* ]]; then
                # This is a feature branch
                inv pydist -b $CIRCLE_BUILD_NUM+${CIRCLE_BRANCH#*/}
            else
                # This is a simple development build
                inv pydist -b $CIRCLE_BUILD_NUM
            fi
      - store_artifacts:
          path: dist
      - persist_to_workspace:
          root: .
          paths:
            - dist

  publish:
    docker:
      - image: udata/circleci:py<< pipeline.parameters.python-version >>
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Publish on PyPI
          command: |
            source venv/bin/activate
            pip install twine
            twine upload --username "${PYPI_USERNAME}" --password "${PYPI_PASSWORD}" dist/*.whl

  trigger-gitlab-pipeline:
    docker:
      - image: cimg/base:stable
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Configure the SSH simple-scaffold repository private key
          command: |
            mkdir -p ~/.ssh
            # SCAFFOLD_PRIVATE_KEY is the private key related to the "simple-scaffold" GitLab repository, so that it can be cloned
            # CircleCI doesn't accept multiple lines in a single environment variable, so the multiline private key must be base64 encoded, and then decoded here
            echo "$SCAFFOLD_PRIVATE_KEY" | base64 -d > ~/.ssh/id_ed25519
            chmod 600 ~/.ssh/id_ed25519
            ssh-keyscan -t rsa gitlab.com >> ~/.ssh/known_hosts
      - run:
          name: Configure Git
          command: |
            git config --global user.email "root@data.gouv.fr"
            git config --global user.name "datagouv"
      - run:
          name: Clone simple-scaffold repository
          command: |
            git clone --quiet --depth 1 $SCAFFOLD_REPO_SSH_URL scaffold
      - run:
          name: Trigger Gitlab CI/CD pipeline for Hydra to deploy to dev environment
          environment:
            # GITLAB_API_TOKEN is the token related to the "infra" GitLab repository, so that the Gitlab CI/CD pipeline can be triggered
            GITLAB_API_TOKEN: ${GITLAB_API_TOKEN}
          command: |
            RELEASE_VERSION=$(cat version.txt)
            cd scaffold
            # Run the script that triggers the Gitlab CI/CD pipeline.
            # The script args are, in order:
            # - udata: the name of the project to deploy (APP_NAME)
            # - $RELEASE_VERSION: the version to deploy (RELEASE_VERSION)
            # - env: the environment to deploy to (ENV)
            # - "": the deploy variables (VARS)
            ./scripts/gitlab-ci-pipeline.sh udata $RELEASE_VERSION dev ""

workflows:
  build-publish-deploy:
    jobs:
      - python:
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - assets:
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - build:
          requires:
            - python
            - assets
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - publish:
          requires:
            - build
          filters:
            branches:
              only:
                - << pipeline.parameters.publish-branch >>
                - /[0-9]+(\.[0-9]+)+/
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
          context: org-global
      - trigger-gitlab-pipeline:
          requires:
            - publish
          filters:
            branches:
              only:
                - << pipeline.parameters.publish-branch >>
          context:
            - org-global
            - gitlab-trigger
