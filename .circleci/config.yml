---
version: 2

jobs:
  python:
    docker:
      - image: udata/circleci:py3.11
      - image: mongo:6.0.4
      - image: redis:alpine
    parallelism: 2
    steps:
      - checkout
      - run:
          name: Compute Python dependencies key
          command: cat requirements/*.pip > python.deps
      - run:
          name: Get the base reference branch
          command: export BASE_BRANCH=$(base_branch)
      - restore_cache:
          keys:
            # 1. Exact match of dependencies
            - py3-cache-v12-{{ arch }}-{{ checksum "python.deps" }}
            # 2. Latest cache from this branch
            - py3-cache-v12-{{ arch }}-{{ .Branch }}
            # 3. Latest cache from base branch (e.g., master)
            - py3-cache-v12-{{ arch }}-{{ .Environment.BASE_BRANCH }}
            # 4. Any latest cache for this architecture (fallback)
            - py3-cache-v12-{{ arch }}-
      - run:
          name: Install Python dependencies
          command: |
            python -m venv venv
            source venv/bin/activate
            pip install --upgrade wheel pip
            pip install -r requirements/develop.pip
            pip install -e .
      - save_cache:
          key: py3-cache-v12-{{ arch }}-{{ checksum "python.deps" }}
          paths:
            - venv
      - save_cache:
          key: py3-cache-v12-{{ arch }}-{{ .Branch }}
          paths:
            - venv
      - run:
          name: Lint and format code and sort imports
          # ruff check --select I . : check linting and imports sorting without fixing (to fix, use --fix)
          # ruff format --check . : check code formatting without fixing (to fix, remove --check)
          command: |
            source venv/bin/activate
            ruff check .
            ruff format --check .
      - run:
          name: Run tests
          command: |
            mkdir -p reports/python
            source venv/bin/activate

            # Place here the tests to execute in parallel (paths relative to udata/)
            # In order to gain some time when executing the tests in the CI, you should put here the tests files that:
            # - takes a longer time to run than average
            # - modify the global app configuration (so that they don't interfere with other tests)
            # TODO: we could split the tests to be run by more than 2 executors
            PARALLEL_TESTS=(
              "harvest/tests/test_actions.py"
              "harvest/tests/test_api.py"
              "harvest/tests/test_base_backend.py"
              "harvest/tests/test_dcat_backend.py"
              "tests/api/test_activities_api.py"
              "tests/api/test_auth_api.py"
              "tests/api/test_datasets_api.py"
              "tests/api/test_organizations_api.py"
              "tests/api/test_reports_api.py"
              "tests/api/test_reuses_api.py"
              "tests/api/test_user_api.py"
              "tests/api/test_transfer_api.py"
              "tests/apiv2/test_swagger.py"
              "tests/dataset/test_dataset_model.py"
              "tests/dataset/test_dataset_rdf.py"
              "tests/forms/test_form_field.py"
              "tests/forms/test_model_field.py"
              "tests/frontend/test_markdown.py"
              "tests/test_model.py"
              "tests/test_routing.py"
              "tests/test_uris.py"
              "tests/test_utils.py"
              # This test modifies the global app configuration
              "tests/test_i18n.py"
            )

            # Convert array to string with | as separator for grep
            PARALLEL_PATTERN=$(printf "%s|" "${PARALLEL_TESTS[@]}" | sed 's/|$//')

            if [ "$CIRCLE_NODE_INDEX" = "0" ]; then
              echo "=== EXECUTOR 0: Running all tests except parallel ones ==="
              cd ${CIRCLE_WORKING_DIRECTORY:-$(pwd)}/udata

              # Collect test files
              find . -name "test_*.py" | grep -v -E "$PARALLEL_PATTERN" | sed 's|^./||' > serial_tests.txt

              # Run pytest with the files
              cd ..
              python -m pytest $(sed 's|^|udata/|' udata/serial_tests.txt)
            else
              echo "=== EXECUTOR 1: Running parallel tests ==="
              PARALLEL_PATHS=()
              for test_path in "${PARALLEL_TESTS[@]}"; do
                PARALLEL_PATHS+=("udata/$test_path")
              done
              PATHS_STRING="${PARALLEL_PATHS[*]}"
              inv test --report --ci --paths "$PATHS_STRING"
            fi
      - store_test_results:
          path: reports/python
      - store_artifacts:
          path: reports/
          destination: reports

      - persist_to_workspace:
          root: .
          paths:
            - venv

  assets:
    docker:
      # TODO make an image based on 2-alpine w/ nvm and phantom deps
      - image: udata/circleci:py3.11
    environment:
      BASH_ENV: /root/.bashrc
    steps:
      - checkout
      - run:
          name: Compute JS dependencies key
          command: cat .nvmrc package.json > js.deps
      - run:
          name: Get the base reference branch
          command: export BASE_BRANCH=$(base_branch)
      - restore_cache:
          keys:
            # 1. Exact match of dependencies
            - js-cache-{{ arch }}-{{ checksum "js.deps" }}
            # 2. Latest cache from this branch
            - js-cache-{{ arch }}-{{ .Branch }}
            # 3. Latest cache from base branch (e.g., master)
            - js-cache-{{ arch }}-{{ .Environment.BASE_BRANCH }}
            # 4. Any latest cache for this architecture (fallback)
            - js-cache-{{ arch }}-
      - run:
          name: Install NodeJS and dependencies
          command: |
            nvm install
            npm install
            npm list || true
      - save_cache:
          key: js-cache-{{ arch }}-{{ checksum "js.deps" }}
          paths:
            - node_modules
      - save_cache:
          key: js-cache-{{ arch }}-{{ .Branch }}
          paths:
            - node_modules
      - run:
          name: Compile assets
          command: |
            npm run assets:build
            npm run widgets:build
            npm run oembed:build

      - persist_to_workspace:
          root: .
          paths:
            - udata/static

  dist:
    docker:
      - image: udata/circleci:py3.11
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Build a distributable package
          command: |
            source venv/bin/activate
            # Build a wheel release
            if [[ $CIRCLE_TAG ]]; then
                # This is a tagged release
                inv pydist
            elif [[ "$CIRCLE_BRANCH" == feature/* ]]; then
                # This is a feature branch
                inv pydist -b $CIRCLE_BUILD_NUM+${CIRCLE_BRANCH#*/}
            else
                # This is a simple development build
                inv pydist -b $CIRCLE_BUILD_NUM
            fi
      - store_artifacts:
          path: dist
      - persist_to_workspace:
          root: .
          paths:
            - dist

  publish:
    docker:
      - image: udata/circleci:py3.11
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Publish on PyPI
          command: |
            source venv/bin/activate
            pip install twine
            twine upload --username "${PYPI_USERNAME}" --password "${PYPI_PASSWORD}" dist/*.whl

workflows:
  version: 2
  build:
    jobs:
      - python:
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - assets:
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - dist:
          requires:
            - python
            - assets
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - publish:
          requires:
            - dist
          filters:
            branches:
              only:
                - master
                - /[0-9]+(\.[0-9]+)+/
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
          context: org-global
